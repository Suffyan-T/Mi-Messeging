{"version":3,"sources":["components/Header.js","components/Message.js","components/Messages.js","firebase.js","components/InputMessage.js","App.js","serviceWorker.js","index.js"],"names":["Header","Message","props","console","log","username","message","isUser","className","Messages","messages","map","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","InputMessage","useEffect","getFocus","useState","input","setInput","document","getElementById","focus","id","value","onChange","e","target","disabled","type","onClick","preventDefault","collection","add","timestamp","FieldValue","serverTimestamp","App","setMessages","setUsername","orderBy","onSnapshot","snap","docs","doc","data","prompt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8PAEe,SAASA,IACpB,OACI,6BACI,2CCFG,SAASC,EAAQC,GAE5BC,QAAQC,IAAR,sBAA2BF,EAAMG,WACjCF,QAAQC,IAAR,8BAAmCF,EAAMI,QAAQD,WAEjD,IAAME,EAAQL,EAAMG,WAAaH,EAAMI,QAAQD,SAC/C,OACI,yBAAKG,UAAYD,EAAS,eAAiB,oBACvC,4BAAKL,EAAMI,QAAQD,UACnB,2BAAIH,EAAMI,QAAQA,UCVf,SAASG,EAASP,GACdA,EAAMG,SACrB,OACI,6BACKH,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OAAG,kBAACL,EAAD,CAASI,SAAUH,EAAMG,SAAUC,QAASA,Q,oBCSvEM,EAbKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,YCTR,SAASC,EAAatB,GAGjCuB,qBAAU,kBAAIC,MAAY,IAHc,MAMdC,mBAAS,IANK,mBAMhCC,EANgC,KAMzBC,EANyB,KAoBlCH,EAAS,kBAAII,SAASC,eAAe,eAAeC,SAG1D,OACI,6BAEI,8BACI,2BACIC,GAAG,cAEHC,MAAQN,EAERO,SAAU,SAAAC,GAAC,OAAGP,EAASO,EAAEC,OAAOH,UAGpC,4BAEII,UAAWV,EAEXW,KAAM,SAENC,QAhCE,SAAAJ,GACdA,EAAEK,iBACF7B,EAAG8B,WAAW,YAAYC,IAAI,CAC1BtC,SAAUH,EAAMG,SAChBC,QAASsB,EACTgB,UAAW/B,IAASU,UAAUsB,WAAWC,oBAE7CjB,EAAS,MAmBD,UC7BD,SAASkB,IAAM,MAGIpB,mBAAS,IAHb,mBAGrBjB,EAHqB,KAGXsC,EAHW,OAIIrB,mBAAS,IAJb,mBAIrBtB,EAJqB,KAIX4C,EAJW,KAmB5B,OAVExB,qBAAU,WACRb,EAAG8B,WAAW,YAAYQ,QAAQ,aAAaC,YAAW,SAAAC,GAAI,OAAEJ,EAAYI,EAAKC,KAAK1C,KAAI,SAAA2C,GAAG,OAAEA,EAAIC,gBAClG,IAGF9B,qBAAU,WACTwB,EAAYO,OAAO,wBAClB,IAIH,yBAAKhD,UAAU,OACb,kBAACR,EAAD,MACA,kBAACS,EAAD,CAAUC,SAAUA,EAAUL,SAAUA,IACxC,kBAACmB,EAAD,CAAcd,SAAUA,EAAUsC,YAAaA,EAAa3C,SAAUA,KCrBxDoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASC,eAAe,SDyHpB,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMlE,c","file":"static/js/main.6cd4ab14.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div>\r\n            <h1>mi-message</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function Message(props) {\r\n\r\n    console.log(`username is ${props.username}`)\r\n    console.log(`message username is ${props.message.username}`)\r\n    // Checks if username is same as message user\r\n    const isUser= props.username === props.message.username\r\n    return (\r\n        <div className={(isUser ? 'user_message' : 'not_user_message')}>\r\n            <h2>{props.message.username}</h2>\r\n            <p>{props.message.message}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Message from './Message'\r\nexport default function Messages(props) {\r\n    const username=props.username\r\n    return (\r\n        <div>\r\n            {props.messages.map(message=> <Message username={props.username} message={message} />)}\r\n        </div>\r\n    )\r\n}\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBPXELO8zLIo5dUzRh_E9xyaKOAekWH2nI\",\r\n    authDomain: \"mi-message.firebaseapp.com\",\r\n    databaseURL: \"https://mi-message.firebaseio.com\",\r\n    projectId: \"mi-message\",\r\n    storageBucket: \"mi-message.appspot.com\",\r\n    messagingSenderId: \"217412695962\",\r\n    appId: \"1:217412695962:web:aa48f356d2442f97476c23\",\r\n    measurementId: \"G-4GJTHGTQJP\"\r\n})\r\n\r\nconst db = firebaseApp.firestore()\r\n\r\nexport default db\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport db from '../firebase';\r\nimport firebase from 'firebase'\r\n\r\nexport default function InputMessage(props) {\r\n\r\n    // Invokes getFocus() on compuonet load\r\n    useEffect(()=>getFocus(), [])\r\n\r\n    // State\r\n     const [input, setInput]= useState('')\r\n\r\n    // Send messages\r\n    const sendMessage=e=>{\r\n        e.preventDefault()\r\n        db.collection('messages').add({\r\n            username: props.username,\r\n            message: input,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n          })\r\n        setInput('')\r\n    }\r\n\r\n    // Sets focus to textfield on page load\r\n    const getFocus=()=>document.getElementById(\"myTextField\").focus()\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {/* Message Input */}\r\n            <form>\r\n                <input \r\n                    id=\"myTextField\"\r\n                    // Sets value of input to input state hook\r\n                    value= {input}\r\n                    // Links value of input to textfield so it updates while typing\r\n                    onChange={e=> setInput(e.target.value)}/>\r\n                \r\n                {/* Send Button */}\r\n                <button\r\n                    // Disables button if textfield is empty\r\n                    disabled={!input}\r\n                    // Sets button type to submit\r\n                    type={'submit'}\r\n                    // Executes sendMessage function on button press\r\n                    onClick={sendMessage}>Send</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\n// Component Import\nimport Header from './components/Header'\nimport Messages from './components/Messages'\nimport InputMessage from './components/InputMessage'\nimport db from './firebase';\n\n\nexport default function App() {\n\n  // State\n  const [messages, setMessages] = useState([])\n  const [username, setUsername] = useState('')\n  \n  // React Hooks\n\n    // Pulls data from firestore \n    useEffect(() => {\n      db.collection('messages').orderBy('timestamp').onSnapshot(snap=>setMessages(snap.docs.map(doc=>doc.data())))\n    }, [])\n\n     // Prompts user to enter Username\n     useEffect(() => {\n      setUsername(prompt('Enter a user name'))\n    }, [])\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Messages messages={messages} username={username}/>\n      <InputMessage messages={messages} setMessages={setMessages} username={username}/>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}